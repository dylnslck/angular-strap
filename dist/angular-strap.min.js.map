{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","navbar/navbar.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","modal/modal.js","popover/popover.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","alert/alert.js","affix/affix.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","provider","defaults","activeClass","routeAttr","data","this","compile","controller","console","controllerAs","resolve","locals","bindToController","angular","forEach","value","isString","$injector","key","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","apply","bsCompilerService","$inject","trigger","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","clientTop","active","offsetTop","clientBottom","highWatermark","scrollTop","Math","lowWatermark","clientHeight","keyCode","$$updateScrollTop","$digest","keyDownHandler","show","$element","on","hide","$onKeyDown","off","$$phase","$root","TypeaheadFactory","array","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","animation","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","promise","$bsCompiler","split","clearTimeout","hoverState","onShow","leaveAnimateCallback","destroyTipElement","onHide","_tipToHide","triggers","nodeName","isTouch","toggle","enter","unbindTriggerEvents","$onFocusElementMouseDown","i","bindKeyboardEvents","tipElement","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$body","unbindAutoCloseEvents","stopEventPropagation","event","getPosition","elRect","getBoundingClientRect","rect","p","width","height","top","left","dimensions","offset","el","scroll","outerDims","isBody","document","documentElement","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","css","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","timeout","$isShown","tipScope","$destroy","$options","$promise","$new","toLowerCase","$id","map","parseFloat","$sce","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","addClass","prefixClass","version","prepend","$applyPlacement","$animate","enterAnimateCallback","_blur","onBeforeHide","blur","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","removeClass","tipPosition","getCalculatedOffset","applyPlacement","query","querySelectorAll","isNative","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","copy","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","_tabsHash","_addTabControl","navClass","$attrs","control","$activeClass","self","$panes","$activePaneChangeListeners","$push","pane","$active","$navClass","$remove","activeIndex","indexOf","splice","$setActive","name","fn","$pane","$onKeyPress","e","$isActive","$index","$tab","transclude","ngModelCtrl","bsTabsCtrl","tabKey","addTabControl","controllers","attrs","bsActivePane","parsedBsActivePane","assign","$parse","render","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","backdrop","size","zIndex","requestAnimationFrame","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","bottom","destroyModalElement","z-index","defaultPrevented","customClass","minor","backdropAnimation","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","content","$popover","PopoverFactory","bsPopover","popover","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","regexp","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","$navbar","liElements","li","liElement","pattern","path","RegExp","matchesSelector","DropdownFactory","$dropdown","onBodyClick","items","parentEl","hasClass","tAttrs","nextSibling","nodeType","parentNode","removeChild","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$views","$mode","$toggleMode","$setToday","$clear","setMode","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","actionEventHandler","bsCollapseToggle","bind","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","v","AsideFactory","$aside","bsAside","aside","duration","dismissable","AlertFactory","$alert","bsAlert","alert","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\n'use strict';\n\n// Source: typeahead/typeahead.js\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n        var keyDownHandler;\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element && !keyDownHandler) {\n                  keyDownHandler = element.on('keydown', $typeahead.$onKeyDown);\n                }\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element && !keyDownHandler) {\n              element.off('keydown', $typeahead.$onKeyDown);\n              keyDownHandler = null;\n            }\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tooltip/tooltip.js\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: timepicker/timepicker.js\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: tab/tab.js\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: select/select.js\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: scrollspy/scrollspy.js\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n\n// Source: modal/modal.js\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: popover/popover.js\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: helpers/raf.js\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n\n// Source: helpers/parse-options.js\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n\n// Source: helpers/dimensions.js\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n\n// Source: helpers/debounce.js\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n\n// Source: helpers/date-parser.js\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n\n// Source: helpers/date-formatter.js\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n\n// Source: helpers/compiler.js\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n\n// Source: navbar/navbar.js\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: dropdown/dropdown.js\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n\n// Source: datepicker/datepicker.js\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n\n// Source: collapse/collapse.js\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n\n// Source: button/button.js\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n\n// Source: aside/aside.js\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: alert/alert.js\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n\n// Source: affix/affix.js\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n\n// Source: module.js\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n\n})(window, document);\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$$updateScrollTop = function (container, index) {\n          if (index > -1 && index < container.children.length) {\n            var active = container.children[index];\n            var clientTop = active.offsetTop;\n            var clientBottom = active.offsetTop + active.clientHeight;\n            var highWatermark = container.scrollTop;\n            var lowWatermark = container.scrollTop + container.clientHeight;\n\n            // active entry overlaps top border\n            if (clientBottom >= highWatermark && clientTop < highWatermark) {\n              container.scrollTop = Math.max(0, container.scrollTop - container.clientHeight);\n            } else if (clientBottom > lowWatermark) {\n              // top of active element is invisible because it's below the bottom of the visible container window\n              container.scrollTop = clientTop;\n            }\n          }\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n\n          // update scrollTop property on $typeahead when scope.$activeIndex is not in visible area\n          $typeahead.$$updateScrollTop($typeahead.$element[0], scope.$activeIndex);\n          scope.$digest();\n        };\n\n        // Overrides\n        var keyDownHandler;\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element && !keyDownHandler) {\n                  keyDownHandler = element.on('keydown', $typeahead.$onKeyDown);\n                }\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          if ($typeahead.$element) $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element && !keyDownHandler) {\n              element.off('keydown', $typeahead.$onKeyDown);\n              keyDownHandler = null;\n            }\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n          hide();\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = options.resolve || {};\n    var locals = options.locals || {};\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        var promise = $tooltip.$promise = $bsCompiler.compile(options);\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.container) {\n            parent = tipContainer;\n            if (tipContainer[0].lastChild) {\n              after = angular.element(tipContainer[0].lastChild);\n            } else {\n              after = null;\n            }\n          } else {\n            parent = null;\n            after = element;\n          }\n\n\n          // Hide any existing tipElement\n          if (tipElement) destroyTipElement();\n          // Fetch a cloned element linked from template\n          tipScope = $tooltip.$scope.$new();\n          tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n          // Set the initial positioning.  Make the tooltip invisible\n          // so IE doesn't try to focus on it off screen.\n          tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          // Append the element, without any animations.  If we append\n          // using $animate.enter, some of the animations cause the placement\n          // to be off due to the transforms.\n          if (after) {\n            after.after(tipElement);\n          } else {\n            parent.prepend(tipElement);\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          // Once placed, animate it.\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(tipElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (tipElement !== null) {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            if (/bottom/.test(originalPlacement) && elementPosition.bottom + tipHeight > viewportPosition.bottom) {\n              placement = originalPlacement.replace('bottom', 'top');\n            } else if (/top/.test(originalPlacement) && elementPosition.top - tipHeight < viewportPosition.top) {\n              placement = originalPlacement.replace('top', 'bottom');\n            }\n\n            if (/left/.test(originalPlacement) && elementPosition.left - tipWidth < viewportPosition.left) {\n              placement = placement.replace('left', 'right');\n            } else if (/right/.test(originalPlacement) && elementPosition.right + tipWidth > viewportPosition.width) {\n              placement = placement.replace('right', 'left');\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          // Get the tooltip's top and left coordinates to center it with this directive.\n          var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n          applyPlacement(tipPosition, placement);\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Stop propagation when clicking inside tooltip\n            tipElement.on('click', stopEventPropagation);\n\n            // Hide when clicking outside tooltip\n            $body.on('click', $tooltip.hide);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            tipElement.off('click', stopEventPropagation);\n            $body.off('click', $tooltip.hide);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function stopEventPropagation (event) {\n          event.stopPropagation();\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            tipElement.remove();\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          if (!$timepicker.$isShown) return;\n          if ($timepicker.$element) $timepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $timepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n    var _tabsHash = {};\n\n    var _addTabControl = function (key, control) {\n      if (!_tabsHash[key]) _tabsHash[key] = control;\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n      self.$onKeyPress = $scope.$onKeyPress = function (e, index) {\n        if (e.keyCode === 32 || e.charCode === 32 || e.keyCode === 13 || e.charCode === 13) {\n          self.$setActive(index);\n        }\n      };\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      $tab.addTabControl = _addTabControl;\n      $tab.tabsHash = _tabsHash;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add a way for developers to access tab scope if needed.  This allows for more fine grained control over what\n        // tabs are available in the tab component\n        if (attrs.tabKey !== '' && attrs.tabKey !== undefined) {\n          $tab.addTabControl(attrs.tabKey, bsTabsCtrl);\n        }\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          $select.$element.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n          _hide(true);\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\" aria-haspopup=\"true\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */\n        $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        $dropdown = $tooltip(element, options);\n        var parentEl = element.parent();\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (/(9)/.test(evt.keyCode)) {\n            $dropdown.hide();\n            return;\n          }\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n          if (parentEl.hasClass('dropdown')) parentEl.addClass('open');\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          if (!$dropdown.$isShown) return;\n          if (options.keyboard && $dropdown.$element) $dropdown.$element.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          if (parentEl.hasClass('dropdown')) parentEl.removeClass('open');\n          hide();\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            tAttrs.template = nextSibling.outerHTML;\n            tAttrs.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          var options = {\n            scope: scope\n          };\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          if (attr.bsDropdown) {\n            scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n              scope.content = newValue;\n            }, true);\n          }\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date, disabled) {\n          if (disabled) return;\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          if (!$datepicker.$isShown) return;\n          $datepicker.$element.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n          _hide(blur);\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        var actionEventHandler = function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        };\n\n        element.on('click', actionEventHandler);\n        element.bind('keydown keypress', function (e) {\n          if (e.which === 13) {\n            actionEventHandler();\n            e.preventDefault();\n          } else if (e.which !== 16 && e.which !== 9) {\n            e.preventDefault();\n          }\n        });\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse'\n]);\n"],"sourceRoot":"/source/"}